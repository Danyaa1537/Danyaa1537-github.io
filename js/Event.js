/*
События мыши:

 click – происходит, когда кликнули на элемент левой кнопкой мыши
 contextmenu – происходит, когда кликнули на элемент правой кнопкой мыши
 mouseover – возникает, когда на элемент наводится мышь
 mousedown и mouseup – когда кнопку мыши нажали или отжали
 mousemove – при движении мыши

 События на элементах управления:

 submit – посетитель отправил форму <form>
 focus – посетитель фокусируется на элементе, например нажимает на <input>

 Клавиатурные события:

 keydown – когда посетитель нажимает клавишу
 keyup – когда посетитель отпускает клавишу

 События документа:

 DOMContentLoaded – когда HTML загружен и обработан,
 DOM документа полностью построен и доступен.
 События CSS:

 transitionend – когда CSS-анимация завершена.
 */


//Фунция вывода имени тега
function text(str) {
    //str название тега которы надо вывести
    alert(" Тег - " + str);
}

function countRabbits() {
    for(var i = 1; i <= 3; i++) {
        alert("Кролик номер " + i);
    }
}

/*-------------------------------------------------------------------------------------------------------------------*/
//Изменение цвета страницы, нужен массив цветов
var color = ["Red", "Yellow", "Green", "LightBlue", "Blue", "Purple"];
//номер цвета, которым будет выполена заливка фона
var numColor = 0;
//функция, изменяющая цвет заливки фона страницы
function change_color() {
    document.body.style.backgroundColor = color[numColor]; //изменяем цвет
    numColor++; //переход к следующему цвету
    if (numColor === color.length) {//если номер цвета больше количества цветов
        numColor = 0;//переходим к первому цвету в массиве
    }
}
/*-------------------------------------------------------------------------------------------------------------------*/
//функция, задающая адрес с которого брать картинку как веселый смайлик
function change1() {
    picSmile.src = "../Image/smile.png";
}
//функция, задающая адрес с которого брать картинку как грустный смайлик
function change2() {
    picSmile.src = "../Image/sad.jpg";
}
/*-------------------------------------------------------------------------------------------------------------------*/
/* addEventListener и removeEventListener */
/*
element.addEventListener(event, handler[, phase]); Назначение обработчика событий
    event       Имя события, например click
    handler     Ссылка на функцию, которую надо поставить обработчиком.
    phase       Необязательный аргумент, «фаза»

 // передать те же аргументы, что были у addEventListener
 element.removeEventListener(event, handler[, phase]); Удаление требует именно ту же функцию
 */

/*
function handler() {
    alert( 'Спасибо!' );
}

input.addEventListener("click", handler);
// ....
input.removeEventListener("click", handler);
*/










